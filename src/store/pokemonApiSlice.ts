// Need to use the React-specific entry point to import `createApi`
import { createApi } from "@reduxjs/toolkit/query/react";
import { axiosBaseQuery } from "./baseQuery";

export type Pokemon = {
  id: number;
  name: string;
  sprites: {
    front_shiny: string;
  };
};
type PokemonApiResponse = Pokemon;

export const pokemonApiSlice = createApi({
  baseQuery: axiosBaseQuery({ baseUrl: "https://pokeapi.co/api/v2/pokemon" }),
  reducerPath: "pokemonApi",
  refetchOnMountOrArgChange: 30, // this is the most common cache timing adjustment
  tagTypes: ["Pokemon"], // Tag types are used for caching and invalidation.
  endpoints: (build) => ({
    getPokemonById: build.query<PokemonApiResponse, string>({
      query: (id) => {
        return { url: `/${id}` };
      },
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (_result, _error, id) => [{ type: "Pokemon", id }],
    }),
  }),
});

// Hooks are auto-generated by RTK-Query
export const { useGetPokemonByIdQuery } = pokemonApiSlice;
