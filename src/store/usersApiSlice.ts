// Need to use the React-specific entry point to import `createApi`
import { createApi } from "@reduxjs/toolkit/query/react";
import { baseQueryWithDelay } from "./baseQuery";

export type User = {
  id: string;
  color: string;
  name: string;
};
type UsersApiResponse = User[];
type UserApiResponse = User;

export const USERS_TAG = "Users";

export const usersApiSlice = createApi({
  baseQuery: baseQueryWithDelay({ baseUrl: "users" }),
  reducerPath: "usersApi",
  refetchOnMountOrArgChange: 30, // this is the most common cache timing adjustment
  tagTypes: [USERS_TAG], // Tag types are used for caching and invalidation.
  endpoints: (build) => ({
    getUsers: build.query<UsersApiResponse, void>({
      query: () => {
        return { url: `/` };
      },
      providesTags: (_result, _error) => [{ type: USERS_TAG }],
    }),
    getUserById: build.query<UserApiResponse, string>({
      query: (id) => {
        return { url: `/${id}` };
      },
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (_result, _error, id) => [{ type: USERS_TAG, id }],
    }),
    updateUser: build.mutation<UserApiResponse, User>({
      query: ({ id, ...rest }) => ({
        url: `/${id}`,
        method: "PUT",
        body: rest,
      }),
      invalidatesTags: (_result, _error, user) => [
        { type: USERS_TAG, id: user.id },
        { type: USERS_TAG },
      ],
      async onQueryStarted(newUser, { dispatch, queryFulfilled }) {
        const result = dispatch(
          usersApiSlice.util.updateQueryData(
            "getUserById",
            newUser.id,
            (draft) => {
              return { ...draft, ...newUser };
            }
          )
        );
        queryFulfilled.catch(result.undo);
      },
    }),
  }),
});

// Hooks are auto-generated by RTK-Query
export const { useGetUsersQuery, useGetUserByIdQuery, useUpdateUserMutation } =
  usersApiSlice;
